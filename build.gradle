plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.6.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

wrapper{
    gradleVersion = '7.6.1'
}

group = 'com.sgdevcamp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

subprojects {
    group = 'com.sgdevcamp'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'junit:junit'
    }

    jacoco {
        toolVersion = "0.8.8"
        reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
    }

    jacocoTestReport {
        reports {
            xml.required = false
            csv.required = false
            html.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    test {
        jacoco {
            enabled = true
            destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
            includes = []
            excludes = []
            excludeClassLoaders = []
            includeNoLocationClasses = false
            sessionId = "<auto-generated value>"
            dumpOnExit = true
            classDumpDir = null
            output = JacocoTaskExtension.Output.FILE
            address = "localhost"
            port = 6300
            jmx = false
        }
    }
}

project(':membership-service'){
    dependencies {
        implementation project(':proto')
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jar{
    enabled = true
}

bootJar {
    enabled = false
}